import axios from 'axios';

import { generateUUId } from '../utilities';
import { EnrollmentProcessor, PhotoIDMatchProcessor } from '../processors';
import { TFacetecSdk } from '../@types';
import {
  TControllerProps,
  TlatestNetworkResponseStatus,
  TlatestProcessor,
  TsessionTokenCallback,
} from './@types';
import {
  FaceTecIDScanResult,
  FaceTecSessionResult,
} from '../declarations/FaceTecPublicApi';
import { Config } from '../config/Config';
import { TauditTrail } from '../View/@types';

export class Controller {
  latestEnrollmentIdentifier = '';
  latestSessionResult = null as unknown as FaceTecSessionResult;
  latestIDScanResult = null as unknown as FaceTecIDScanResult | null;
  latestProcessor = null as unknown as TlatestProcessor;

  constructor(
    private sdk: TFacetecSdk,
    private cfg: Config,
    private controller: TControllerProps
  ) {
    this.cfg.initializeFromAutogeneratedConfig((initializedSuccessfully) => {
      if (initializedSuccessfully) {
        this.controller.setInitialized(true);

        switch (this.cfg.flow) {
          case 0:
            this.onEnrollUserPressed();
            break;
          case 1:
            this.onPhotoIDMatchPressed();
            break;
          default:
            console.log('No suitable configuration');
            console.log('0 - Enroll User, 1 - Photo ID Match');
        }

        // AppUtilities.setVocalGuidanceSoundFiles();
      }

      console.log(
        this.sdk.getFriendlyDescriptionForFaceTecSDKStatus(sdk.getStatus())
      );
    });
  }

  onEnrollUserPressed() {
    // AppUtilities.fadeOutMainUIAndPrepareForSession();

    this.getSessionToken((sessionToken: string) => {
      this.latestEnrollmentIdentifier = this.cfg.sessionId || generateUUId();
      this.latestProcessor = new EnrollmentProcessor(
        sessionToken,
        this.sdk,
        this.cfg,
        this
      );
    });
  }

  onPhotoIDMatchPressed() {
    // AppUtilities.fadeOutMainUIAndPrepareForSession();

    this.getSessionToken((sessionToken: string) => {
      this.latestEnrollmentIdentifier = this.cfg.idScanId || generateUUId();
      this.latestProcessor = new PhotoIDMatchProcessor(
        sessionToken,
        this.sdk,
        this.cfg,
        this
      );
    });
  }

  onVocalGuidanceSettingsButtonPressed() {
    console.log('onVocalGuidanceSettingsButtonPressed');

    // AppUtilities.setVocalGuidanceMode();
  }

  async onViewAuditTrailPressed() {
    try {
      const scanResultBlob = await axios.post('/api/facetec/scanResultBlob');
      const SessionResult = await axios.post('/api/facetec/SessionResult');
      const IDScanResult = await axios.post('/api/facetec/IDScanResult');

      this.controller.setAuditTrail({
        scanResultBlob: scanResultBlob.data,
        SessionResult: SessionResult.data,
        IDScanResult: IDScanResult.data,
      });
    } catch (err) {
      console.log(err);
    }

    // AppUtilities.showAuditTrailImages(latestSessionResult, latestIDScanResult);
  }

  closeAuditTrail() {
    this.controller.setAuditTrail(null as unknown as TauditTrail);
  }

  onComplete(
    sessionResult: FaceTecSessionResult,
    idScanResult: FaceTecIDScanResult | null,
    latestNetworkResponseStatus: TlatestNetworkResponseStatus
  ) {
    this.latestSessionResult = sessionResult;
    this.latestIDScanResult = idScanResult;

    // showAdditionalScreensServerIsDown();

    if (this.latestProcessor.isSuccess()) {
      // AppUtilities.displayStatus('Success');
    } else {
      if (
        this.isNetworkResponseServerIsOffline(latestNetworkResponseStatus) ===
        true
      ) {
        // this.showAdditionalScreensServerIsDown();

        return;
      }
    }

    // AppUtilities.showMainUI();
  }

  getSessionToken(sessionTokenCallback: TsessionTokenCallback) {
    const controller = this;
    const XHR = new XMLHttpRequest();
    let sessionTokenErrorHasBeenHandled = false;

    XHR.open('GET', this.cfg.BaseURL + '/session-token');
    XHR.setRequestHeader('X-Device-Key', this.cfg.DeviceKeyIdentifier);
    XHR.setRequestHeader(
      'X-User-Agent',
      this.sdk.createFaceTecAPIUserAgentString('')
    );

    XHR.onreadystatechange = function () {
      if (this.readyState === XMLHttpRequest.DONE) {
        let sessionToken = '';

        try {
          sessionToken = JSON.parse(this.responseText).sessionToken;
          if (typeof sessionToken !== 'string') {
            if (sessionTokenErrorHasBeenHandled === false) {
              sessionTokenErrorHasBeenHandled = true;
              if (controller.isNetworkResponseServerIsOffline(XHR.status)) {
                controller.showAdditionalScreensServerIsDown();
              } else {
                controller.onServerSessionTokenError();
              }
            }

            return;
          }
        } catch (_a) {
          if (sessionTokenErrorHasBeenHandled === false) {
            sessionTokenErrorHasBeenHandled = true;
            if (controller.isNetworkResponseServerIsOffline(XHR.status)) {
              controller.showAdditionalScreensServerIsDown();
            } else {
              controller.onServerSessionTokenError();
            }
          }

          return;
        }
        // AppUtilities.hideLoadingSessionToken();
        sessionTokenCallback(sessionToken);
      }
    };

    XHR.onerror = function () {
      if (sessionTokenErrorHasBeenHandled === false) {
        sessionTokenErrorHasBeenHandled = true;
        if (controller.isNetworkResponseServerIsOffline(XHR.status)) {
          controller.showAdditionalScreensServerIsDown();
        } else {
          controller.onServerSessionTokenError();
        }
      }
    };

    XHR.send();

    window.setTimeout(function () {
      if (XHR.readyState !== XMLHttpRequest.DONE) {
        // AppUtilities.showLoadingSessionToken();
      }
    }, 3000);
  }

  isNetworkResponseServerIsOffline(networkResponseStatus: number) {
    return networkResponseStatus >= 500;
  }

  onServerSessionTokenError() {
    console.log('onServerSessionTokenError');

    // AppUtilities.handleErrorGettingServerSessionToken();
  }

  showAdditionalScreensServerIsDown() {
    console.log('showAdditionalScreensServerIsDown');

    // AdditionalScreens.showServerUpGradeView();
  }

  getLatestEnrollmentIdentifier() {
    return this.latestEnrollmentIdentifier;
  }

  clearLatestEnrollmentIdentifier() {
    this.latestEnrollmentIdentifier = '';
  }
}
