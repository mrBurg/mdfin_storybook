import {
  TConfigProps,
  TFacetecSdk,
  TInitializeFromAutogeneratedConfigCallback,
} from '../@types';

import faceTecStrings from './FaceTecStrings.json';
import ocrLocalizationJSON from './FaceTec_OCR_Customization.json';
import { Theme } from '../themes/Theme';
export class Config {
  ProductionKey: string;
  DeviceKeyIdentifier: string;
  BaseURL: string;
  PublicFaceScanEncryptionKey: string;
  sessionId: string;
  idScanId: string;
  flow: number;

  constructor(private sdk: TFacetecSdk, props: TConfigProps) {
    this.ProductionKey = props.ProductionKey;
    this.DeviceKeyIdentifier = props.DeviceKeyIdentifier;
    this.BaseURL = props.BaseURL;
    this.PublicFaceScanEncryptionKey = props.PublicFaceScanEncryptionKey;
    this.sessionId = props.sessionId;
    this.idScanId = props.idScanId;
    this.flow = props.flow;

    this.sdk.setResourceDirectory('/facetec/resources');
    this.sdk.setImagesDirectory('/facetec/images');
    new Theme(sdk);
  }

  initializeFromAutogeneratedConfig(
    callback: TInitializeFromAutogeneratedConfigCallback
  ) {
    if (this.ProductionKey) {
      this.sdk.initializeInProductionMode(
        this.ProductionKey,
        this.DeviceKeyIdentifier,
        this.PublicFaceScanEncryptionKey,
        callback
      );
    } else {
      this.sdk.initializeInDevelopmentMode(
        this.DeviceKeyIdentifier,
        this.PublicFaceScanEncryptionKey,
        callback
      );
    }

    this.sdk.configureLocalization(faceTecStrings);
    this.sdk.configureOCRLocalization(ocrLocalizationJSON);
  }
}
